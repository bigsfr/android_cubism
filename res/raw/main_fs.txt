
precision mediump float;
uniform sampler2D sShadowMap;
uniform vec3 uLightPos;

varying vec4 vPositionModel;
varying vec4 vPositionView;
varying vec4 vPositionLight;
varying vec3 vNormal;

float unpack (vec4 colour) {
	const vec4 bitShifts = vec4(1.0, 1.0 / 255.0, 1.0 / (255.0 * 255.0), 1.0 / (255.0 * 255.0 * 255.0));
	return dot(colour, bitShifts);
}

void main() {
	float diffuse = 0.0;
	float specular = 0.0;
	vec3 lightDir = uLightPos - vPositionModel.xyz;
	vec3 N = normalize(vNormal);
	vec3 L = normalize(lightDir);		
	float lambert = dot(N, L);
	if (lambert > 0.0) {
		diffuse = lambert * 0.7;
		vec3 R = reflect(-L, N);
		vec3 E = normalize(-vPositionView.xyz);
		specular = pow(max(dot(R, E), 0.0), 32.0) * 0.3;
	}
	gl_FragColor = vec4(vec3(1.0) * (0.3 + diffuse + specular), 1.0);
	
	const float linearDepthConstant = 1.0 / (20.0 - 0.1);
	vec3 depth = vPositionLight.xyz / vPositionLight.w;
	depth.z = length(vPositionModel.xyz - uLightPos) * linearDepthConstant;
	depth.z *= 0.98;
	float shadowDepth = unpack(texture2D(sShadowMap, depth.xy));
	if (vPositionLight.w > 0.0 && depth.z > shadowDepth) {
		gl_FragColor *= 0.5;
	}
}
